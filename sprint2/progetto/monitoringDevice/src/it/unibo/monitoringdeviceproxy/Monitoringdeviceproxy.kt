/* Generated by AN DISI Unibo */ 
package it.unibo.monitoringdeviceproxy

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Monitoringdeviceproxy ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		var Status = 0 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						connectToMqttBroker( "tcp://localhost:8081", "monitoringdeviceproxynat" )
						CommUtils.outred("$name | CREATED  (and connected to mosquitto) ... ")
						subscribe(  "wisinfo" ) //mqtt.subscribe(this,topic)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStatoIncinerator",cond=whenEvent("statoIncinerator"))
				}	 
				state("handleStatoIncinerator") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("statoIncinerator(N)"), Term.createTerm("statoIncinerator(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												try{
													Status = payloadArg(0).toInt()	
												} catch(e:Exception){
													Status = -1
												}
								if( Status == 0 || Status == 1 
								 ){forward("incineratorState", "incineratorState($Status)" ,"monitoringdevice" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleStatoIncinerator",cond=whenEvent("statoIncinerator"))
				}	 
			}
		}
} 
