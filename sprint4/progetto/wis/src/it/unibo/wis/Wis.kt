/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var AshStorageStatus = 0 
				var wisReady = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outgreen("$name STARTS")
						forward("activationCommand", "activationCommand(1)" ,"incinerator" ) 
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingRP", cond=doswitch() )
				}	 
				state("waitingRP") { //this:State
					action { //it:State
						CommUtils.outgreen("$name waiting for updates")
						if( wisReady == 0 
						 ){updateResourceRep("waitingForUpdates(1)" 
						)
						wisReady = 1 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleUpdateAshesLevel",cond=whenDispatch("ashesLevel"))
					transition(edgeName="t05",targetState="handleRP",cond=whenDispatch("arrived_RP"))
				}	 
				state("handleRP") { //this:State
					action { //it:State
						wisReady = 0 
						CommUtils.outgreen("New RP is arrived")
						forward("arrived_RP", "arrived_RP(1)" ,"oprobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleRPInBurnin",cond=whenDispatch("rpInBurnin"))
				}	 
				state("handleRPInBurnin") { //this:State
					action { //it:State
						CommUtils.outgreen("An RP is ready to be burnt")
						forward("startBurning", "startBurning(1)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleEndBurning",cond=whenEvent("endBurning"))
				}	 
				state("handleEndBurning") { //this:State
					action { //it:State
						CommUtils.outgreen("Incinerator has finished to burn")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="endRoute",cond=whenDispatch("newAshes"))
				}	 
				state("endRoute") { //this:State
					action { //it:State
						CommUtils.outgreen("$name OpRobot has finished its route")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingRP", cond=doswitch() )
				}	 
				state("handleUpdateAshesLevel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ashesLevel(N)"), Term.createTerm("ashesLevel(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AshStorageStatus = payloadArg(0).toInt() 
								CommUtils.outgreen("AshStorageStatus: $AshStorageStatus")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingRP", cond=doswitchGuarded({ AshStorageStatus == 0  
					}) )
					transition( edgeName="goto",targetState="waitingAshesToBeRemoved", cond=doswitchGuarded({! ( AshStorageStatus == 0  
					) }) )
				}	 
				state("waitingAshesToBeRemoved") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS is waiting for an operator to remove ashes in AshStorage...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleUpdateAshesLevel",cond=whenDispatch("ashesLevel"))
				}	 
			}
		}
} 
