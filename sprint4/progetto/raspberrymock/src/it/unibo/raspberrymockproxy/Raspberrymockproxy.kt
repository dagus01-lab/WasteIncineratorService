/* Generated by AN DISI Unibo */ 
package it.unibo.raspberrymockproxy

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Raspberrymockproxy ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outred("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleUpdateStatoAshStorage",cond=whenDispatch("ashStorageState"))
					transition(edgeName="t01",targetState="handleUpdateStatoWasteStorage",cond=whenDispatch("wasteStorageState"))
				}	 
				state("handleUpdateStatoAshStorage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ashStorageState(N)"), Term.createTerm("ashStorageState(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var State = payloadArg(0)
												when(State){
													"FULL" ->  
								emit("statoAshStorage", "statoAshStorage(1,2)" ) 
								
													"NORMAL" ->  
								emit("statoAshStorage", "statoAshStorage(0,1)" ) 
								
													"EMPTY" ->  
								emit("statoAshStorage", "statoAshStorage(0,0)" ) 
								
													else ->  
								CommUtils.outgreen("Invalid input!")
								
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleUpdateStatoWasteStorage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("wasteStorageState(N)"), Term.createTerm("wasteStorageState(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var RPs = payloadArg(0) 
								emit("num_RP", "num_RP($RPs)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
