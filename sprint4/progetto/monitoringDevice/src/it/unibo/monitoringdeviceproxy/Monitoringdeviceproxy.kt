/* Generated by AN DISI Unibo */ 
package it.unibo.monitoringdeviceproxy

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.resources.MonitoringDeviceConfigReader
import main.resources.MonitoringDeviceConfig

class Monitoringdeviceproxy ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val config = MonitoringDeviceConfigReader.loadMDConfig("monitoringdevice_conf.json")
		
				var Status = 0
				val broker_url = config.broker_url
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						connectToMqttBroker( "$broker_url", "monitoringdeviceproxynat" )
						CommUtils.outred("$name | CREATED  (and connected to mosquitto) ... ")
						subscribe(  "wisinfo" ) //mqtt.subscribe(this,topic)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStatoIncinerator",cond=whenEvent("statoIncinerator"))
				}	 
				state("handleStatoIncinerator") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("statoIncinerator(N)"), Term.createTerm("statoIncinerator(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									var State = payloadArg(0)
												when(State){
													"OFF" ->  
								forward("incineratorState", "incineratorState(0)" ,"monitoringdevice" ) 
								
													"BURNING" ->   
								forward("incineratorState", "incineratorState(1)" ,"monitoringdevice" ) 
								
													else ->  
								CommUtils.outgreen("$name | received invalid incinerator state: $State!")
								
													}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleStatoIncinerator",cond=whenEvent("statoIncinerator"))
				}	 
			}
		}
} 
