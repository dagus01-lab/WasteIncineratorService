version: '3.8'
services:
  dmm:
    image: alpinelinux/docker-cli
    entrypoint: docker
    command: |
        run 
        --rm
        -i
        --name device-manager
        --privileged
        --cgroupns=host
        --pid=host
        --userns=host
        -v /sys:/host/sys
        -v /var/run/docker.sock:/var/run/docker.sock
        ghcr.io/allfro/allfro/device-mapping-manager:nightly
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.device == rpi 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  wis:
    image: dagus01/wis:arm
    ports:
    - "8085:8085"
    networks:
    - wisLAN
    healthcheck:
      test: [ "nslookup wis_broker && gpioget /dev/gpiochip0 18" ]
      interval: 30s
      timeout: 5s
      retries: 2
    configs:
    - source: wis_conf.json
      target: /waste_incinerator_service-1.0/bin/wis_conf.json
    - source: basicrobotConfig.json
      target: /basicrobot24-1.0/bin/basicrobotConfig.json
    - source: MotorsUpdated.c
      target: /basicrobot24-1.0/bin/MotorsUpdated.c
    command:
      [
        "sh",
        "-c",
        "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...'; sleep 5; done && \
        until gpioget /dev/gpiochip0 5; do echo 'Waiting for authorization to access GPIO pins..';  done && \
        gcc -o /basicrobot24-1.0/bin/Motors /basicrobot24-1.0/bin/MotorsUpdated.c -lgpiod && \
        cd /waste_incinerator_service-1.0/bin/ && pwd && ls && ./wis_start.sh"
      ]
    deploy:
      placement:
        constraints: [ node.hostname == robottino ]
    volumes:
      - /dev/gpiochip0:/dev/gpiochip0

  scale:
    image: dagus01/scale
    # ports:
    #   - "8200:8200"  
    depends_on:
      - basicrobot
      - broker
    networks:
      - wisLAN 
    command: [
      "sh", 
      "-c", 
      " until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...'; sleep 5; done && gpioget /dev/gpiochip0 13 && ./scale"]
    configs:
      - source: scale_conf.json
        target: /scale-1.0/bin/scale_conf.json
    healthcheck:
      test: [ "nslookup wis_broker && gpioget /dev/gpiochip0 13" ]
      interval: 30s
      timeout: 5s
      retries: 2
    deploy:
      placement:
        constraints:
          - node.hostname == raspberry
    volumes:
      - /dev/gpiochip0:/dev/gpiochip0

  monitoringdevice:
    image: dagus01/monitoringdevice
    # ports:
    #   - "8100:8100"  
    depends_on:
      - basicrobot
      - broker
    networks:
      - wisLAN 
    command: [
      "sh", 
      "-c", 
      "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...'; sleep 5; done && gpioget /dev/gpiochip0 18 && ./monitoringdevice"]
    configs:
      - source: monitoringdevice_conf.json
        target: /monitoringdevice-1.0/bin/monitoringdevice_conf.json
    healthcheck:
      test: [ "nslookup wis_broker && gpioget /dev/gpiochip0 18" ]
      interval: 30s
      timeout: 5s
      retries: 2
    deploy:
      placement:
        constraints:
          - node.hostname == raspberry 
    volumes:
      - /dev/gpiochip0:/dev/gpiochip0


  wis_facade:
    hostname: wis_facade
    image: dagus01/wisfacade:1.0
    depends_on:
    - wis_broker
    ports:
    - "8080:8080"
    networks:
    - wisLAN
    # healthcheck:
    #   test: [ "CMD", "nc -nz wis_broker 8081" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    configs:
    - source: facadeConfig.json
      target: /facadeConfig.json
    - source: stunnel_wisfacade.conf
      target: /etc/stunnel/stunnel_wisfacade.conf
    command:
      [
        "sh",
        "-c",
        "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...';  sleep 5; done && java --add-opens java.base/java.net=ALL-UNNAMED -jar ./wisFacade-0.0.1-SNAPSHOT.jar"
      ]
    deploy:
      placement:
        constraints: [ node.role == manager ]

  wis_broker:
    hostname: wis_broker
    image: dagus01/mqtt_broker:1.0
    # ports:
    # - "8081:8081"
    networks:
      wisLAN:
        aliases:
          - wis_broker
    configs:
    - source: mosquitto.conf
      target: /etc/mosquitto/mosquitto.conf
    deploy:
      # replicas: 1
      # restart_policy:
      #   condition: on-failure
    # placement:
    #   constraints: [ node.role == manager ]
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "mosquitto_pub -h localhost -p 8081 -t test  -m  'readiness_check'  -r  &&  mosquitto_sub -h localhost -p 8081 -t test -C 1 -W 5 | grep 'readiness_check'"
    #     ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    command: [ "mosquitto", "-c", "/etc/mosquitto/mosquitto.conf" ]


configs:
  mosquitto.conf:
    file: ./configs/mosquitto.conf
  basicrobotConfig.json:
    file: ./configs/nanorobotConfig.json
  facadeConfig.json:
    file: ./configs/facadeConfig.json
  scale_conf.json:
    file: ./configs/scale_conf.json
  wis_conf.json:
    file: ./configs/wis_conf.json
  monitoringdevice_conf.json:
    file: ./configs/monitoringdevice_conf.json
  raspberryMockFacadeConfig.json:
    file: ./configs/raspberryMockFacadeConfig.json
  stunnel_wisfacade.conf:
    file: ./configs/stunnel_wisfacade.conf
  raspberry_setup.sh:
    file: ./configs/raspberry_setup.sh
  nginx_wis.conf:
    file: ./configs/nginx_wis.conf
  MotorsUpdated.c:
    file: ./configs/MotorsUpdated.c
  wis_start.sh:
    file: ./configs/wis_start.sh

networks:
  wisLAN:
    driver: overlay
    attachable: true
    ipam:
      driver: default       # Uses the default IP Address Management (IPAM) driver
      config:
        - subnet: "10.0.10.0/24"       # Specifies the subnet for the network
    #       gateway: "10.0.10.1"         # Specifies the gateway IP
    # driver_opts:
    #   encrypted: "true"