version: '3.8'
services:
  wis:
    hostname: wis
    image: dagus01/wis:1.0
    ports:
    - "8125:8125"
    depends_on:
    - basicrobot
    - broker
    networks:
    - wisLAN
    configs:
    - source: wis_conf.json
      target: /waste_incinerator_service-1.0/bin/wis_conf.json
    - source: nginx_wis.conf
      target: /etc/nginx/nginx.conf
    command:
      [
        "sh",
        "-c",
        "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...'; sleep 5; done && until coap-client -m get coap://basicrobot:8020/ctxbasicrobot/basicrobot; do echo 'Waiting for  basicrobot...'; sleep 10; done && nginx && ./waste_incinerator_service"
      ]
    deploy:
      placement:
        constraints: [ node.role == manager ]

  raspberrymock:
    hostname: raspberrymock
    image: dagus01/raspberrymock:1.0
    ports:
    - "8100:8100"
    - "8095:8095"
    depends_on:
    - basicrobot
    - broker
    networks:
    - wisLAN
    command:
      [
        "sh",
        "-c",
        "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...'; sleep 5; done &&./raspberrymock"
      ]
    configs:
    - source: monitoringdevice_conf.json
      target: /raspberrymock-1.0/bin/monitoringdevice_conf.json
    - source: scale_conf.json
      target: /raspberrymock-1.0/bin/scale_conf.json
    - source: raspberryMockFacadeConfig.json
      target: /raspberrymock-1.0/bin/facadeConfig.json
    deploy:
      placement:
        constraints: [ node.role == manager ]

  basicrobot:
    hostname: basicrobot
    image: dagus01/basicrobot24:1.0
    ports:
    - "8020:8020"
    - "8085:8085"
    networks:
      wisLAN:
        aliases:
          - basicrobot
    depends_on:
    - virtualrobot
    deploy:
      # replicas: 1
      # restart_policy:
      #   condition: on-failure
      placement:
        constraints: [ node.role == manager ]
    configs:
    - source: basicrobotConfig.json
      target: /basicrobot24-1.0/bin/basicrobotConfig.json
    # healthcheck:
    #   test: [ "CMD", "nc -nzu localhost 8020" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    command:
      [
        "sh",
        "-c",
        "until nc -z virtualrobot 8090; do echo 'Waiting for virtualrobot...'; sleep 5; done && ./basicrobot24"
      ]

  wis_facade:
    hostname: wis_facade
    image: dagus01/wisfacade:1.0
    depends_on:
    - wis_broker
    ports:
    - "8080:8080"
    networks:
    - wisLAN
    # healthcheck:
    #   test: [ "CMD", "nc -nz wis_broker 8081" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    configs:
    - source: facadeConfig.json
      target: /facadeConfig.json
    command:
      [
        "sh",
        "-c",
        "until nc -nz wis_broker 8081; do echo 'Waiting for wis_broker...';  sleep 5; done && cat facadeConfig.json && java --add-opens java.base/java.net=ALL-UNNAMED -jar ./wisFacade-0.0.1-SNAPSHOT.jar"
      ]
    deploy:
      placement:
        constraints: [ node.role == manager ]

  wis_broker:
    hostname: wis_broker
    image: dagus01/mqtt_broker:1.0
    ports:
    - "8081:8081"
    networks:
      wisLAN:
        aliases:
          - wis_broker
    configs:
    - source: mosquitto.conf
      target: /etc/mosquitto/mosquitto.conf
    deploy:
      # replicas: 1
      # restart_policy:
      #   condition: on-failure
    # placement:
    #   constraints: [ node.role == manager ]
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "mosquitto_pub -h localhost -p 8081 -t test  -m  'readiness_check'  -r  &&  mosquitto_sub -h localhost -p 8081 -t test -C 1 -W 5 | grep 'readiness_check'"
    #     ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    command: [ "mosquitto", "-c", "/etc/mosquitto/mosquitto.conf" ]

  virtualrobot:
    hostname: virtualrobot
    image: docker.io/natbodocker/virtualrobotdisi23:1.0
    ports:
    - 8090:8090
    - 8091:8091
    deploy:
      # replicas: 1
      # restart_policy:
      #   condition: on-failure
      placement:
        constraints: [ node.role == manager ]
    networks:
      wisLAN:
        aliases:
          - virtualrobot
    # healthcheck:
    #   test: [ "CMD", "nc -nz localhost 8090" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

configs:
  mosquitto.conf:
    file: ./configs/mosquitto.conf
  basicrobotConfig.json:
    file: ./configs/basicrobotConfig.json
  facadeConfig.json:
    file: ./configs/facadeConfig.json
  scale_conf.json:
    file: ./configs/scale_conf.json
  wis_conf.json:
    file: ./configs/wis_conf.json
  monitoringdevice_conf.json:
    file: ./configs/monitoringdevice_conf.json
  raspberryMockFacadeConfig.json:
    file: ./configs/raspberryMockFacadeConfig.json
  nginx_wis.conf:
    file: ./configs/nginx_wis.conf

networks:
  wisLAN:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
