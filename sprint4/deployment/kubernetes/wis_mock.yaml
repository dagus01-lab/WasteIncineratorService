apiVersion: apps/v1
kind: Deployment
metadata:
  name: wis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wis
  template:
    metadata:
      labels:
        app: wis
    spec:
      initContainers:
      - name: wait-for-wis-broker
        image: busybox
        command:
          [
            'sh',
            '-c',
            'until nc -nz wis-broker-service 8081; do echo "Waiting for
              wis-broker..."; sleep 5; done'
          ]
      # - name: delay-for-basicrobot
      #   image: busybox
      #   command:
      #     [
      #       'sh',
      #       '-c',
      #       # 'until nc -zvu basicrobot-service 8020 ; do echo "Waiting for
      #     #   basicrobot..."; sleep 10; done && sleep 5'
      #       'until coap-client -m get coap://basicrobot-service:8020; do echo
      #         "Waiting for basicrobot..."; sleep 10; done && sleep 5'
      #     ]
      containers:
      - name: wis-container
        image: dagus01/wis:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8125
        command:
          [
            "sh",
            "-c",
            "until coap-client -m get
              coap://basicrobot-service:8020/ctxbasicrobot/basicrobot; do echo
              'Waiting for basicrobot...'; sleep 10; done
              &&  ./waste_incinerator_service"
          ]
        volumeMounts:
        - name: config-volume
          subPath: stunnel_wis.conf
          mountPath: /etc/stunnel/stunnel_wis.conf
        - name: config-volume
          subPath: wis_conf.json
          mountPath: /waste_incinerator_service-1.0/bin/wis_conf.json
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
      volumes:
      - name: config-volume
        configMap:
          name: config-files
          items:
          - key: stunnel_wis.conf
            path: stunnel_wis.conf
          - key: wis_conf.json
            path: wis_conf.json
---
apiVersion: v1
kind: Service
metadata:
  name: wis-service
spec:
  selector:
    app: wis
  ports:
  - protocol: TCP
    port: 8125
    targetPort: 8125
  type: ClusterIP
---
# Raspberry Mock Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raspberrymock
spec:
  replicas: 1
  selector:
    matchLabels:
      app: raspberrymock
  template:
    metadata:
      labels:
        app: raspberrymock
    spec:
      initContainers:
      - name: wait-for-wis-broker
        image: busybox
        command:
          [
            'sh',
            '-c',
            'until nc -nz wis-broker-service 8081; do echo "Waiting for
              wis-broker..."; sleep 5; done'
          ]
      containers:
      - name: wis-facade-container
        image: dagus01/raspberrymock:1.0
        ports:
        - containerPort: 8095
        - containerPort: 8100
        command: [ "sh", "-c", "./raspberrymock" ]
        volumeMounts:
        - name: configs-volume
          subPath: scale_conf.json
          mountPath: /raspberrymock-1.0/bin/scale_conf.json
        - name: configs-volume
          subPath: monitoringdevice_conf.json
          mountPath: /raspberrymock-1.0/bin/monitoringdevice_conf.json
        - name: configs-volume
          subPath: raspberryMockFacadeConfig.json
          mountPath: /raspberrymock-1.0/bin/facadeConfig.json
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
      volumes:
      - name: configs-volume
        configMap:
          name: config-files
          items:
          - key: raspberryMockFacadeConfig.json
            path: raspberryMockFacadeConfig.json
          - key: scale_conf.json
            path: scale_conf.json
          - key: monitoringdevice_conf.json
            path: monitoringdevice_conf.json
---
apiVersion: v1
kind: Service
metadata:
  name: raspberrymock-service
spec:
  selector:
    app: raspberrymock
  ports:
  - name: facadeport
    protocol: TCP
    port: 8095
    targetPort: 8095
  - name: raspberrymockport
    protocol: TCP
    port: 8100
    targetPort: 8100
  type: ClusterIP
---
# Basic Robot Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: basicrobot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basicrobot
  template:
    metadata:
      labels:
        app: basicrobot
    spec:
      initContainers:
      - name: wait-for-virtualrobot
        image: busybox
        command:
          [
            'sh',
            '-c',
            ' until nc -z virtualrobot-service 8090; do echo "Waiting for
              virtualrobot..."; sleep 5; done'
          ]
      containers:
      - name: basicrobot-container
        image: natbodocker/basicrobot24:1.0
        ports:
        - containerPort: 8020
        - containerPort: 8085
        volumeMounts:
        - name: configs-volume
          subPath: basicrobotConfig.json
          mountPath: /basicrobot24-1.0/bin/basicrobotConfig.json
        command: [ "sh", "-c", "./basicrobot24" ]
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
      volumes:
      - name: configs-volume
        configMap:
          name: config-files
          items:
          - key: basicrobotConfig.json
            path: basicrobotConfig.json
---
apiVersion: v1
kind: Service
metadata:
  name: basicrobot-service
spec:
  selector:
    app: basicrobot
  ports:
  - name: coaptcp
    protocol: TCP
    port: 8020
    targetPort: 8020
  - name: coapudp
    protocol: UDP
    port: 8020
    targetPort: 8020
  - name: tcp
    protocol: TCP
    port: 8085
    targetPort: 8085
  type: ClusterIP
---
# WIS Facade Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wis-facade
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wis-facade
  template:
    metadata:
      labels:
        app: wis-facade
    spec:
      initContainers:
      - name: wait-for-wis-broker
        image: busybox
        command:
          [
            'sh',
            '-c',
            'until nc -nz wis-broker-service 8081; do echo "Waiting for
              wis-broker..."; sleep 5; done'
          ]
      containers:
      - name: wis-facade-container
        image: dagus01/wisfacade:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        command: [ "sh", "-c", "java -jar ./wisFacade-0.0.1-SNAPSHOT.jar" ]
        volumeMounts:
        - name: configs-volume
          subPath: facadeConfig.json
          mountPath: /facadeConfig.json
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
      volumes:
      - name: configs-volume
        configMap:
          name: config-files
          items:
          - key: facadeConfig.json
            path: facadeConfig.json
---
apiVersion: v1
kind: Service
metadata:
  name: wis-facade-service
spec:
  selector:
    app: wis-facade
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# WIS Broker Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wis-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wis-broker
  template:
    metadata:
      labels:
        app: wis-broker
    spec:
      containers:
      - name: wis-broker-container
        image: dagus01/mqtt_broker:1.0
        ports:
        - containerPort: 8081
        readinessProbe:
          exec:
            command:
              [
                "sh",
                "-c",
                "mosquitto_pub -h localhost -p 8081 -t test -m
                  'readiness_check' -r &&  mosquitto_sub -h localhost -p 8081 -t
                  test -C 1 -W 5 | grep 'readiness_check'"
              ]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        command: [ "mosquitto", "-c", "/etc/mosquitto/mosquitto.conf" ]
        volumeMounts:
        - name: configs-volume
          subPath: mosquitto.conf
          mountPath: /etc/mosquitto/mosquitto.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
      volumes:
      - name: configs-volume
        configMap:
          name: config-files
          items:
          - key: mosquitto.conf
            path: mosquitto.conf
---
apiVersion: v1
kind: Service
metadata:
  name: wis-broker-service
spec:
  selector:
    app: wis-broker
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
# WIS Broker Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtualrobot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: virtualrobot
  template:
    metadata:
      labels:
        app: virtualrobot
    spec:
      containers:
      - name: virtualrobot-container
        image: natbodocker/virtualrobotdisi23:1.0
        ports:
        - containerPort: 8090
        - containerPort: 8091
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: 8090
        #   initialDelaySeconds: 5
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   failureThreshold: 3
        #   successThreshold: 1
        command: [ "node", "WebpageServer" ]
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: virtualrobot-service
spec:
  selector:
    app: virtualrobot
  ports:
  - name: websocket
    protocol: TCP
    port: 8091
    targetPort: 8091
  - name: http
    protocol: TCP
    port: 8090
    targetPort: 8090
  type: ClusterIP
