System raspberrymock

Event statoAshStorage:statoAshStorage(N) "Event that simulate the status of the ash Storage (0=normal, 1=full)"
Event num_RP : num_RP(N) "command that simulates an update in the number of RPs"
Dispatch statoAshStorage:statoAshStorage(N) "messaggio dalla GUI per notificare l'aggiornamento dello stato dell'ash storage"
Dispatch statoWasteStorage:statoWasteStorage(N) "messaggio dalla GUI per notificare l'aggiornamento del numero di RP presenti nel waste storage"

Context ctxRaspberryMock ip [ host= "localhost"      port= 8100 ]

QActor raspberrymockproxy context ctxRaspberryMock{
	State s0 initial{
		println("$name | STARTS") color red
	}
	Goto wait
	State wait{
		
	}
	Transition t0 whenMsg statoAshStorage -> handleUpdateStatoAshStorage
				  whenMsg statoWasteStorage -> handleUpdateStatoWasteStorage
	State handleUpdateStatoAshStorage{
		onMsg(statoAshStorage:statoAshStorage(N)){
			[#
				var cmd = payloadArg(0)
				when(cmd){
					"FULL" -> #]emit statoAshStorage:statoAshStorage(1) [#
					"NORMAL" -> #]emit statoAshStorage:statoAshStorage(0)[#
					"EMPTY"  -> #]emit statoAshStorage:statoAshStorage(0)[#
					else -> #]println("Invalid input!") color green[#
				}
			#]
		}
	}
	Goto wait
	State handleUpdateStatoWasteStorage{
		[#var RPs = payloadArg(0)#]
		emit num_RP:num_RP($RPs)
	}
	Goto wait
	
}

QActor monitoringdevice context ctxRaspberryMock withobj config using "MonitoringDeviceConfigReader.loadMDConfig(\"monitoringdevice_conf.json\")"{
	import "main.resources.MonitoringDeviceConfigReader"
	import "main.resources.MonitoringDeviceConfig" 
	[#
		var Level=0
		var broker_url = config.broker_url
	#]
	State s0 initial{
		println("$name | STARTS") color yellow
		connectToMqttBroker "$broker_url" clientid "monitoringdevicenat"
		publish "wisinfo" -m statoAshStorage:statoAshStorage(0)
	}
	Goto wait
	State wait{
		
	}
	Transition t0 	whenTime 10000->keepConnectionAlive
					whenEvent statoAshStorage->handleNewStatoAshStorage
	State handleNewStatoAshStorage{
		onMsg(statoAshStorage:statoAshStorage(N)){
			[#Level = payloadArg(0).toInt()#]
			publish "wisinfo" -m statoAshStorage:statoAshStorage($Level)
		}
	}
	Goto wait
	State keepConnectionAlive{
		publish "wisinfo" -m statoAshStorage:statoAshStorage($Level)
	}
	Goto wait
}

QActor scale context ctxRaspberryMock withobj config using "ScaleConfigReader.loadScaleConfig(\"scale_conf.json\")"{
	import "main.resources.ScaleConfigReader"
	import "main.resources.ScaleConfig" 
	
	[#
		var RPs = 0
		var broker_url = config.broker_url
	#]
	State s0 initial{
		println("$name | STARTS") color yellow
		connectToMqttBroker "$broker_url" clientid "scalenat"
		publish "wisinfo" -m num_RP:num_RP($RPs)
	}
	Goto wait
	State wait{
		
	}
	Transition t0 	whenTime 10000->keepConnectionAlive
					whenEvent num_RP->notifyNewRP
	State notifyNewRP{
		onMsg(num_RP:num_RP(N)){
			[#RPs = payloadArg(0).toInt()#]
			publish "wisinfo" -m num_RP:num_RP($RPs)
		}
	}
	Goto wait
	State keepConnectionAlive{
		publish "wisinfo" -m num_RP:num_RP($RPs)
	}
	Goto wait
}

/*Facade raspberryMockFacade port 8085 usingactor raspberrymockproxy inctx ctxRaspberryMock 
                   appl "main.java.robotfacade24.Robotfacade24Application" 
                   UserLibs -f "robotfacade24-1.0-plain"  -f "robotfacade24-1.0"*/
