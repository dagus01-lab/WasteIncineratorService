/* Generated by AN DISI Unibo */ 
package it.unibo.raspberryinfocontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Raspberryinfocontroller ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var RPs = 0;
				var AshesLevel = 0;
				var wisReady = 0;
				var monitoringDeviceRunning = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						CommUtils.outgray("$name | RUNS")
						observeResource("localhost","8125","ctx_waste_incinerator_service","wis","waitingForNewRPs")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						if( monitoringDeviceRunning == 1 && wisReady == 1 && RPs>0 && AshesLevel==0 
						 ){forward("arrived_RP", "arrived_RP(1)" ,"wis" ) 
						wisReady = 0 
						}
						else
						 {if( wisReady == 1 
						  ){forward("ashesLevel", "ashesLevel($AshesLevel)" ,"wis" ) 
						 }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleMonitoringDeviceOff",cond=whenDispatch("monitoringDeviceOff"))
					transition(edgeName="t05",targetState="handleNewAshesLevel",cond=whenDispatch("ashesLevel"))
					transition(edgeName="t06",targetState="handleNewScaleState",cond=whenDispatch("arrived_RP"))
					transition(edgeName="t07",targetState="handleWISReady",cond=whenDispatch("waitingForNewRPs"))
				}	 
				state("handleMonitoringDeviceOff") { //this:State
					action { //it:State
						monitoringDeviceRunning=0 
						CommUtils.outmagenta("$name | Waiting for monitoringDevice to run again..")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleNewScaleState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrived_RP(N)"), Term.createTerm("arrived_RP(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("$name received new RP")
								RPs = payloadArg(0).toInt() 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleWISReady") { //this:State
					action { //it:State
						wisReady = 1 
						CommUtils.outblack("$name | WIS ready to take new RPs")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleNewAshesLevel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ashesLevel(N)"), Term.createTerm("ashesLevel(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											AshesLevel = payloadArg(0).toInt()
											monitoringDeviceRunning=1
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
