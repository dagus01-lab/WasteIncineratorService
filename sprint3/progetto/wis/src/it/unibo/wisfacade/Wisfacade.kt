/* Generated by AN DISI Unibo */ 
package it.unibo.wisfacade

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wisfacade ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						CommUtils.outyellow("$name STARTS")
						observeResource("localhost","8125","ctx_waste_incinerator_service","scalemock","arrived_RP")
						observeResource("localhost","8125","ctx_waste_incinerator_service","monitoring_device_mok","statoAshStorage")
						observeResource("localhost","8125","ctx_waste_incinerator_service","incinerator","incineratorState")
						observeResource("localhost","8125","ctx_waste_incinerator_service","oprobot","opRobotState")
						observeResource("localhost","8125","ctx_waste_incinerator_service","oprobot","opRobotJob")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_arrived_RP",cond=whenDispatch("arrived_RP"))
					transition(edgeName="t01",targetState="handle_statoAshStorage",cond=whenDispatch("statoAshStorage"))
					transition(edgeName="t02",targetState="handle_incineratorState",cond=whenDispatch("incineratorState"))
					transition(edgeName="t03",targetState="handle_opRobotState",cond=whenDispatch("opRobotState"))
					transition(edgeName="t04",targetState="handle_opRobotJob",cond=whenDispatch("opRobotJob"))
				}	 
				state("handle_arrived_RP") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("arrived_RP(N)"), Term.createTerm("arrived_RP(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Payload = payloadArg(0) 
								updateResourceRep("arrived_RP($Payload)" 
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_statoAshStorage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("statoAshStorage(N)"), Term.createTerm("statoAshStorage(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Payload = payloadArg(0) 
								updateResourceRep("statoAshStorage($Payload)" 
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_incineratorState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("incineratorState(N)"), Term.createTerm("incineratorState(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Payload = payloadArg(0) 
								updateResourceRep("incineratorState($Payload)" 
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_opRobotState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("opRobotState(N)"), Term.createTerm("opRobotState(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Payload = payloadArg(0) 
								updateResourceRep("opRobotState($Payload)" 
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_opRobotJob") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("opRobotJob(N)"), Term.createTerm("opRobotJob(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Payload = payloadArg(0) 
								updateResourceRep("opRobotJob($Payload)" 
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
