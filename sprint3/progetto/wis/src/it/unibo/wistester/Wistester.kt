/* Generated by AN DISI Unibo */ 
package it.unibo.wistester

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Wistester ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t032",targetState="handleinfo",cond=whenRequest("info"))
				}	 
				state("handleinfo") { //this:State
					action { //it:State
						CommUtils.outblue("$name: new test request arrived")
						forward("arrived_RP", "arrived_RP(1)" ,"wis" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handleinfo", 
				 	 					  scope, context!!, "local_tout_"+name+"_handleinfo", 70000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t033",targetState="failure",cond=whenTimeout("local_tout_"+name+"_handleinfo"))   
					transition(edgeName="t034",targetState="success",cond=whenDispatch("newAshes"))
				}	 
				state("success") { //this:State
					action { //it:State
						answer("info", "inforeply", "inforeply(1)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t035",targetState="handleinfo",cond=whenRequest("info"))
				}	 
				state("failure") { //this:State
					action { //it:State
						answer("info", "inforeply", "inforeply(0)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t036",targetState="handleinfo",cond=whenRequest("info"))
				}	 
			}
		}
} 
