/* Generated by AN DISI Unibo */ 
package it.unibo.monitoringdevicedisplay

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Monitoringdevicedisplay ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val display = main.java.MonitoringDeviceGui()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | STARTS")
						 kotlin.concurrent.thread(start = true) { 
									 display.initialize(myself) 
								   }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleGuiCmd",cond=whenDispatch("guicmd"))
				}	 
				state("handleGuiCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("guicmd(N)"), Term.createTerm("guicmd(CMD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var cmd = payloadArg(0)
												when(cmd){
													"FULL" ->  
								emit("statoAshStorage", "statoAshStorage(1)" ) 
								
													"NORMAL" ->  
								emit("statoAshStorage", "statoAshStorage(0)" ) 
								
													"EMPTY"  ->  
								emit("statoAshStorage", "statoAshStorage(0)" ) 
								
													else ->  
								CommUtils.outgreen("Invalid input!")
								
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
