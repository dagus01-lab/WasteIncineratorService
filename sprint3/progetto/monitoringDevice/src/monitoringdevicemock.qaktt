System monitoringdevicemock

Event statoAshStorage:statoAshStorage(N) "Event that simulate the status of the ash Storage (0=normal, 1=full)"

//Definizione dei contesti
Context ctxscale ip [ host= "localhost"      port= 8200 ]

QActor inputreader context ctxscale{
	[#var input = ""#]
	State s0 initial{
		println("$name | STARTS") color green
		println("Write full or normal to simulate the status of the ash storage") color green
	}
	Goto readinput
	State readinput{
		[#input = readLine()#]
		if [#input.contentEquals("full")#]{
			emit statoAshStorage:statoAshStorage(1)
		}
		else {
			if [#input.contentEquals("normal")#]{
				emit statoAshStorage:statoAshStorage(0)
			}
			else {
				println("Invalid input!") color green
			}
		}
	}
	Goto readinput
}
QActor scale context ctxscale{
	[#var Level=0#]
	State s0 initial{
		println("$name | STARTS") color yellow
		connectToMqttBroker "tcp://localhost:8081" clientid "scalenat"
		publish "wisinfo" -m statoAshStorage:statoAshStorage(0)
	}
	Goto wait
	State wait{
		
	}
	Transition t0 	whenTime 10000->keepConnectionAlive
					whenEvent statoAshStorage->handleNewStatoAshStorage
	State handleNewStatoAshStorage{
		onMsg(statoAshStorage:statoAshStorage(N)){
			[#Level = payloadArg(0)#]
			publish "wisinfo" -m statoAshStorage:statoAshStorage($Level)
		}
	}
	Goto wait
	State keepConnectionAlive{
		publish "wisinfo" -m statoAshStorage:statoAshStorage($Level)
	}
}