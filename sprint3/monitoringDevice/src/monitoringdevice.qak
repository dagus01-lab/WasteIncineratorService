/** Modello per l'architettura logica dello SPRINT2 del monitoringDevice */

System monitoringdevice

//Messaggi inerenti lo stato del ashStorage
Event sonardata : distance(D)   "emitted  by sonardevice or (better) by datacleaner"
Event ashStorageLevel : ashStorageLevel(L, D)   "emitted  by datacleaner. Contains level and distance"
Event statoAshStorage : statoAshStorage(N, D)  "AshStorage info: 0 is not empty, 1 otherwise"

//Messaggi per modificare lo stato del led fisico
Dispatch led_on : led_on(N) "messaggio di accensione del led"
Dispatch led_blink: led_blink(N) "messaggio di lampeggio del led"
Dispatch led_off : led_off(N) "messaggio di spegnimento del led"

//Messaggio per notificare lo stato del Incinerator al monitoringDevice
Event statoIncinerator : statoIncinerator(N)  "Incinerator's burning status info: 0 is not burning, 1 otherwise"
Dispatch incineratorState : incineratorState(N) 
//Definizione dei contesti
Context ctxmonitoringdevice ip [ host= "localhost"      port= 8100 ] 
  
//--------------------------------Attore monitoring device proxy----------------------------------------------
QActor monitoringdeviceproxy context ctxmonitoringdevice{ 
	[#var Status = 0#]
	State s0 initial{
		connectToMqttBroker "tcp://192.168.1.102:8081" clientid "monitoringdeviceproxynat"
		//connectToMqttBroker "tcp://test.mosquitto.org" clientid "monitoringdeviceproxynat"
 		println("$name | CREATED  (and connected to mosquitto) ... ") color red
 		subscribe "wisinfo"
	}
	Transition t0 whenEvent statoIncinerator->handleStatoIncinerator
	State handleStatoIncinerator{
		onMsg(statoIncinerator:statoIncinerator(N)){
			[#
				try{
					Status = payloadArg(0).toInt()	
				} catch(e:Exception){
					Status = -1
				}
			#]
			if [#Status == 0 || Status == 1#]{
				forward monitoringdevice -m incineratorState:incineratorState($Status)
			}			
		}
	}
	Transition t0 whenEvent statoIncinerator->handleStatoIncinerator
	
}
 
//--------------------------------Attore sonardevice----------------------------------------------------------
QActor sonardevice context ctxmonitoringdevice{
[# 
	lateinit var reader : java.io.BufferedReader
    lateinit var p : Process	
    var Distance = 0;
    var Data = "";
#]	

	State s0 initial{
		println("$name | sonarstart") 
	 	[#
			p       = Runtime.getRuntime().exec("python sonar.py")
			reader  = java.io.BufferedReader(  java.io.InputStreamReader(p.getInputStream() ))	
		#]		
	}
	Goto readSonarData
	
	//Stato per la lettura dei dati dal sonar fisico
	State readSonarData{
	[# 
		Data = reader.readLine()
		//CommUtils.outyellow("$name with python: data = $Data"   )
		if( Data != null ){
		try{ 
			val vd = Data.toFloat()
			val v  = vd.toInt()
			if( v <= 500 ){	//A first filter ...
				Distance = v				
			}else Distance = 500
		}catch(e: Exception){
				CommUtils.outred("$name readSonarDataERROR: $e "   )
		}
		}
		
	#]	
		if [# Distance > 0 #] { 
		    //println("$name with python: data = $Data"   ) color yellow
			emitlocalstream sonardata : distance($Distance)			 
		}
		//autodispatch doread : doread(1)
	}
	Goto readSonarData
}
//----------------------------------------------------------------------------------------------------------

//--------------------------------Attore datacleaner--------------------------------------------------------
QActor datacleaner context ctxmonitoringdevice {
	[# 
		var Level = -1;
		var previous_D = -1;
		var D = -1; 
		val DLIMIT = 10;
		val DMIN = 100; //rappresenta l'altezza del contenitore
		var timeLastUpdate = System.currentTimeMillis();
		var timeout = 10000;
	#]
	
	State s0 initial {
		delay 1000
		subscribeTo sonardevice for sonardata		
		println("$name subscribed to sonardevice") color blue
	}
	Transition t0 whenEvent sonardata -> filter
	
	//Stato per filtrare soltanto i dati di interesse.
	State filter {
     	onMsg(sonardata : distance(D)) {
	      	[#  
	      		D = payloadArg(0).toInt()
	      		Level = if (D > DMIN) {
					    0
					} else if (D < DLIMIT) {
					    2
					} else {
					    1
					}
	      	#]	      	
	      	//println("$name D=$D, level=$Level") color red
	      		
	      	if [#D != previous_D#]{ //verificare il margine della misura
	      		println("$name emit newLevel of Ash") color magenta
	 			emitlocalstream ashStorageLevel:ashStorageLevel($Level, $D)
	 			[#previous_D = D#]
	     	}
	     	if[#System.currentTimeMillis()-timeLastUpdate>=timeout#]{
	     		emitlocalstream ashStorageLevel:ashStorageLevel($Level)
	     		[#timeLastUpdate=System.currentTimeMillis()#]
	     	}
     	}
	}	
	Transition t0 whenEvent sonardata -> filter
}
//--------------------------------------------------------------------------------------------------------

//--------------------------------Attore monitoringDevice-------------------------------------------------
QActor monitoringdevice context ctxmonitoringdevice{
	[#
		var levelAshStorage = -1;
		var D = -1;
		var IncineratorStatus = 0;
	#]
	
	State s0 initial{
		delay 2000
		println("$name STARTS") color blue
		connectToMqttBroker "tcp://192.168.1.102:8081" clientid "monitoringdevicenat"
		//connectToMqttBroker "tcp://test.mosquitto.org" clientid "monitoringdevicenat"
 		println("$name | CREATED  (and connected to mosquitto) ... ") color blue
 		subscribe "wisinfo"
		subscribeTo datacleaner for ashStorageLevel
	}
	Goto wait
	
	//Stato che simula l'attesa di ricevere dati dal sonar fisico o aggiornamenti sullo stato del Incinerator
	State wait{
		println("$name Waiting data from sonar or updates from Incinerator...") color blue
	}
	Transition t0 whenMsg incineratorState-> handleUpdateIncineratorState
				  whenEvent ashStorageLevel -> handleAshStorageLevel
			
	//Stato per gestire l'aggiornamento dello stato del Incinerator
	State handleUpdateIncineratorState{
		printCurrentMessage color green
		onMsg(incineratorState : incineratorState(N)) {
	      	[#IncineratorStatus = payloadArg(0).toInt()#]
				println("$name Current incinerator state: $IncineratorStatus") color blue
				
				if [#IncineratorStatus==1#]{
					//se l'Incinerator sta bruciando, allora devo accendere il led
					forward led -m led_on:led_on(1)
				}
				else{
					//altrimenti, controllo lo stato del ashStorage
					if [#levelAshStorage==1#]{
						//se non è né vuoto né pieno, allora devo spegnere il led
						forward led -m led_off:led_off(1)
					}
					else{
						//altrimenti devo far lampeggiare il led
						forward led -m led_blink:led_blink(1)
					}
				}
	    }
	} 
	Goto wait
	
	//Stato per gestire nuovi dati sul livello della cenere
	State handleAshStorageLevel{ 
		onMsg(ashStorageLevel:ashStorageLevel(L, D)) {
			[#
				levelAshStorage = payloadArg(0).toInt()
				D = payloadArg(1).toInt()
			#]
			println("$name current AshStorageLevel=$levelAshStorage") color blue
			if [#IncineratorStatus==0#]{ 
				if [#levelAshStorage==1#]{
					//se Incinerator non sta bruciando e AshStorage non è né vuoto né pieno, allora spengo il led
					forward led -m led_off:led_off(1)
				}
				else{
					//se Incinerator non sta bruciando e AshStorage è pieno o vuoto, allora faccio lampeggiare il led
					forward led -m led_blink:led_blink(1)
				}
			}
			
			//Aggiorno lo stato del AshStorage in base alla distanza misurata
			if [#levelAshStorage==2#]{
				println("$name Updating AshStorageStatus to 1") color blue
				publish "wisinfo" -m statoAshStorage:statoAshStorage(1, $D)
			} else {
				println("$name Updating AshStorageStatus to 0") color blue
				publish "wisinfo" -m statoAshStorage:statoAshStorage(0, $D)
			}
		}	
	}
	Goto wait
}
//--------------------------------------------------------------------------------------------------------

//--------------------------------Attore led--------------------------------------------------------------
QActor led context ctxmonitoringdevice{
	[#
		lateinit var writer : java.io.BufferedWriter
    	lateinit var p : Process
    #]
	State s0 initial{
		println("$name started") color magenta
		[#
			p       = Runtime.getRuntime().exec("python ledDevice.py")
			writer = java.io.BufferedWriter( java.io.OutputStreamWriter(p.getOutputStream()));
		#]	
	}
	Goto wait
	
	//Stato che simula l'attesa di informazioni dal monitoringDevice
	State wait{
		println("Waiting info from monitoringDevice...")
	}
	Transition t0 whenMsg led_on -> handle_led_on 
				  whenMsg led_off-> handle_led_off
				  whenMsg led_blink -> handle_led_blink
				  
	//Stato per gestire l'accensione del led fisico
	State handle_led_on {
		println("LED on") color magenta
		[# 
			writer.write("on")
        	writer.newLine()
        	writer.flush()
		#]
	}
	Goto wait
	
	//Stato per gestire lo spegnimento del led fisico
	State handle_led_off {
		println("LED off") color magenta
		[# 
			writer.write("off")
	        writer.newLine()
	        writer.flush()
		#]
	}
	Goto wait
	
	//Stato per gestire il lampeggiamento del led fisico
	State handle_led_blink {
		println("LED blinks") color magenta
		[#
			writer.write("blink")
	        writer.newLine()
	        writer.flush()
		#]
	}
	Goto wait
}
//--------------------------------------------------------------------------------------------------------