/* Generated by AN DISI Unibo */ 
package it.unibo.monitoringdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Monitoringdevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var levelAshStorage = -1;
				var previousLevelAshStorage = -1;
				var D = -1;
				var IncineratorStatus = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outblue("$name STARTS")
						connectToMqttBroker( "tcp://192.168.1.102:8081", "monitoringdevicenat" )
						CommUtils.outblue("$name | CREATED  (and connected to mosquitto) ... ")
						subscribe(  "wisinfo" ) //mqtt.subscribe(this,topic)
						subscribeToLocalActor("datacleaner") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outblue("$name Waiting data from sonar or updates from Incinerator...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleUpdateIncineratorState",cond=whenDispatch("incineratorState"))
					transition(edgeName="t05",targetState="handleAshStorageLevel",cond=whenEvent("ashStorageLevel"))
				}	 
				state("handleUpdateIncineratorState") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("incineratorState(N)"), Term.createTerm("incineratorState(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								IncineratorStatus = payloadArg(0).toInt() 
								CommUtils.outblue("$name Current incinerator state: $IncineratorStatus")
								if( IncineratorStatus==1 
								 ){forward("led_on", "led_on(1)" ,"led" ) 
								}
								else
								 {if( levelAshStorage==1 
								  ){forward("led_off", "led_off(1)" ,"led" ) 
								 }
								 else
								  {forward("led_blink", "led_blink(1)" ,"led" ) 
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleAshStorageLevel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ashStorageLevel(L,D)"), Term.createTerm("ashStorageLevel(L,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												levelAshStorage = payloadArg(0).toInt()
												D = payloadArg(1).toInt()
								if( IncineratorStatus==0 && levelAshStorage != previousLevelAshStorage 
								 ){CommUtils.outblue("$name current AshStorageLevel=$levelAshStorage")
								if( levelAshStorage==1 
								 ){forward("led_off", "led_off(1)" ,"led" ) 
								}
								else
								 {forward("led_blink", "led_blink(1)" ,"led" ) 
								 }
								previousLevelAshStorage = levelAshStorage 
								}
								if( levelAshStorage==2 
								 ){//val m = MsgUtil.buildEvent(name, "statoAshStorage", "statoAshStorage(1,$D)" ) 
								publish(MsgUtil.buildEvent(name,"statoAshStorage","statoAshStorage(1,$D)").toString(), "wisinfo" )   
								}
								else
								 {//val m = MsgUtil.buildEvent(name, "statoAshStorage", "statoAshStorage(0,$D)" ) 
								 publish(MsgUtil.buildEvent(name,"statoAshStorage","statoAshStorage(0,$D)").toString(), "wisinfo" )   
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
