/* Generated by AN DISI Unibo */ 
package it.unibo.inputreader

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Inputreader ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		var input = "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | STARTS")
						CommUtils.outgreen("Write arrived_RP to simulate the arrival of an RP")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readinput", cond=doswitch() )
				}	 
				state("readinput") { //this:State
					action { //it:State
						input = readLine() 
						if( input.contentEquals("arrived_RP") 
						 ){emit("new_RP", "new_RP(1)" ) 
						}
						else
						 {CommUtils.outgreen("Invalid input!")
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readinput", cond=doswitch() )
				}	 
			}
		}
} 
