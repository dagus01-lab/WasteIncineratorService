/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import unibo.planner23.*

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
			
				var planner     = Planner23Util()
				planner.initAI()
				planner.loadRoomMap("mapCompleteWithObst23ok")
				var HOMEx = 0
				var HOMEy = 0
				var WASTEINx = 0
				var WASTEINy = 4
				var BURNINx = 3
				var BURNINy = 2
				var BURNOUTx = 4
				var BURNOUTy = 3
				var ASHOUTx = 6
				var ASHOUTy = 4
				planner.setGoal(HOMEx,HOMEy)
				var CurPlan = planner.doPlanCompact()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | $MyName engaging ... ")
						request("engage", "engage($MyName,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_engage", 
				 	 					  scope, context!!, "local_tout_"+name+"_engage", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t05",targetState="noResponse",cond=whenTimeout("local_tout_"+name+"_engage"))   
					transition(edgeName="t06",targetState="waitingWorking",cond=whenReply("engagedone"))
					transition(edgeName="t07",targetState="end",cond=whenReply("engagerefused"))
				}	 
				state("noResponse") { //this:State
					action { //it:State
						CommUtils.outyellow("BasicRobot did not answer!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("waitingWorking") { //this:State
					action { //it:State
						CommUtils.outyellow("$name is in HOME position waiting for working")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="takeRP",cond=whenDispatch("arrived_RP"))
				}	 
				state("takeRP") { //this:State
					action { //it:State
						
									planner.setGoal(WASTEINx,WASTEINy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="bringRPtoBURNIN",cond=whenReply("doplandone"))
					transition(edgeName="t010",targetState="exit",cond=whenReply("doplanfailed"))
				}	 
				state("bringRPtoBURNIN") { //this:State
					action { //it:State
						delay(2000) 
						
									planner.setGoal(BURNINx,BURNINy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="returnHOME",cond=whenReply("doplandone"))
					transition(edgeName="t012",targetState="exit",cond=whenReply("doplanfailed"))
				}	 
				state("returnHOME") { //this:State
					action { //it:State
						forward("rpInBurnin", "rpInBurnin(1)" ,"wis" ) 
						CommUtils.outyellow("An RP is in BURNIN port")
						
									planner.setGoal(HOMEx,HOMEy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="takeAshFromBURNOUT",cond=whenEvent("endBurning"))
				}	 
				state("takeAshFromBURNOUT") { //this:State
					action { //it:State
						
									planner.setGoal(BURNOUTx,BURNOUTy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="bringAshtoASHOUT",cond=whenReply("doplandone"))
					transition(edgeName="t015",targetState="exit",cond=whenReply("doplanfailed"))
				}	 
				state("bringAshtoASHOUT") { //this:State
					action { //it:State
						delay(2000) 
						
									planner.setGoal(ASHOUTx,ASHOUTy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="restartJob",cond=whenReply("doplandone"))
					transition(edgeName="t017",targetState="exit",cond=whenReply("doplanfailed"))
				}	 
				state("restartJob") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outyellow("The ash has been taken out")
						forward("newAshes", "newAshes(1)" ,"monitoring_device_mok" ) 
						
									planner.setGoal(HOMEx,HOMEy)
									CurPlan = planner.doPlanCompact()
									planner.doPathOnMap(CurPlan)
						request("doplan", "doplan($CurPlan,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="waitingWorking",cond=whenReply("doplandone"))
					transition(edgeName="t019",targetState="exit",cond=whenReply("doplanfailed"))
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | ENDS ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("exit") { //this:State
					action { //it:State
						CommUtils.outyellow("$name has been terminated")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
