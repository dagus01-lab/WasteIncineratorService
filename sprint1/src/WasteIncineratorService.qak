/** Modello per l'architettura logica dello SPRINT1 del WasteIncineratorService */

System waste_incinerator_service

//Messaggio per la ricezione di un nuovo RP
Dispatch arrived_RP : arrived_RP(N) "command that simulate the arrival of new RP"

//Messaggio per notificare lo stato del Incinerator al WIS
Dispatch statoIncinerator : statoIncinerator(N)  "Incinerator's burning status info: 0 is not burning, 1 otherwise"

//Messaggi per la gestione del burning dell'Incinerator
Dispatch activationCommand : activationCommand(N) "command that turns the incinerator on"
Dispatch startBurning : startBurning(N) "command that makes the incinerator start burning the next RP"
Dispatch rpInBurnin : rpInBurnin(N)  "command that makes the wis start the incinerator"
Event 	 endBurning : endBurning(N) "event generated by the incinerator when the burning process is terminated"

//Messaggio per notificare al MonitoringDevice MOK l'aggiunta di nuova cenere.
//Negli sprint successivi, quando verrà introdotto il vero MonitoringDevice, questo messaggio non sarà più necessario
//in quanto sarà il Sonar a monitorare il livello della cenere
Dispatch newAshes : newAshes(N) "command that simulate the arrival of new RP's ashes"

//Messaggio per notificare lo stato del AshStorage al WIS
Dispatch statoAshStorage : statoAshStorage(N)  "AshStorage info: 0 is not empty, 1 otherwise"

//Messaggi per ingaggiare e muovere il BasicRobot
Request engage        : engage(OWNER, STEPTIME)	
Reply   engagedone    : engagedone(ARG)    for engage
Reply   engagerefused : engagerefused(ARG) for engage
Dispatch disengage    : disengage(ARG)

Request  doplan     : doplan( PATH, STEPTIME )
Reply doplandone    : doplandone( ARG )    for doplan
Reply doplanfailed  : doplanfailed( ARG )  for doplan

Dispatch cmd    : cmd( MOVE )  "MOVE = a|d|l|r|h   "
Dispatch end       	: end(ARG)
Request step       : step(TIME)	
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step

//Definizione dei due contesti (service e basicRobot)
Context ctx_waste_incinerator_service ip [host="localhost" port=8125]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]

//Attore "esterno" BasicRobot
ExternalQActor basicrobot context ctxbasicrobot

//--------------------------------Attore WIS-----------------------------------------------------------------
QActor wis context ctx_waste_incinerator_service{
	[# var statoAshStorage = 0 #]
	
	State s0 initial{
		delay 500
		println("$name STARTS") color green
		//Si mette ad osservare lo stato del AshStorage fornito dal MonitoringDevice
		observeResource monitoring_device_mok msgid statoAshStorage
		//mando messaggio di attivazione del Incinerator
		forward incinerator -m activationCommand : activationCommand(1)
	}
	Goto waitingRP
	
	//Stato che simula l'attesa di un nuovo RP nel WasteStorage
	State waitingRP{
	}
	Transition t0 whenMsg arrived_RP ->  handleRP
				
	//Stato per gestire l'arrivo di un nuovo RP nel WasteStorage
	State handleRP{
		println("New RP is arrived") color green
		//notifico il robot che un nuovo RP è disponibile
		forward oprobot -m arrived_RP : arrived_RP(1)
	}
	Transition t0 whenMsg rpInBurnin -> handleRPInBurnin
	
	//Stato per gestire l'arrivo del opRobot nella porta di BURNIN del Incinerator
	State handleRPInBurnin{
		println("An RP is ready to be burnt") color green
		//mando messaggio di inizio burning al Incinerator
		forward incinerator -m startBurning : startBurning(1)
	}
	Transition t0 whenEvent endBurning -> handleEndBurning
	
	//Stato per gestire l'evento di endBurning
	State handleEndBurning{
		println("Incinerator has finished to burn") color green
	}
	Transition t0 whenMsg statoAshStorage -> handleUpdateStatoAshStorage
	
	//Stato per gestire l'aggiornamento dello stato del AshStorage
	State handleUpdateStatoAshStorage{
		onMsg( statoAshStorage : statoAshStorage(N)){
			[# statoAshStorage = payloadArg(0).toInt() #]
			println("AshStorageStatus: $statoAshStorage") color green
		}
	}
	Goto waitingRP if [# statoAshStorage == 0 #] else waitingAshesToBeRemoved
	
	//Stato per gestire l'attesa che la cenere nel AshStorage sia rimossa per poter bruciare nuovi RPs
	State waitingAshesToBeRemoved{
		println("WIS is waiting an operator to remove ashes in AshStorage...") color green
	}
	Transition t0 whenMsg statoAshStorage -> handleUpdateStatoAshStorage
}
//-----------------------------------------------------------------------------------------------------------

//----------------------------------------Attore OpRobot-----------------------------------------------------
QActor oprobot context ctx_waste_incinerator_service{
	import "unibo.planner23.*"
	[#	
		var planner     = Planner23Util()
		planner.initAI()
		planner.loadRoomMap("mapCompleteWithObst23ok")
		var HOMEx = 0
		var HOMEy = 0
		var WASTEINx = 0
		var WASTEINy = 4
		var BURNINx = 3
		var BURNINy = 2
		var BURNOUTx = 4
		var BURNOUTy = 3
		var ASHOUTx = 6
		var ASHOUTy = 4
		planner.setGoal(HOMEx,HOMEy)
		var CurPlan = planner.doPlanCompact()
	#]
	State s0 initial{
		println("$name STARTS") color yellow
	}
	Goto engage
	
	//Stato per provare ad "ingaggiare" il BasicRobot
	State engage{
		println("$name | $MyName engaging ... ") color yellow 
		request basicrobot -m engage : engage($MyName,330)
	}
	Transition t0 whenTime 1000 -> noResponse
				  whenReply engagedone   -> waitingWorking
 	              whenReply engagerefused -> end
 	          
 	//stato che rappresenta l'assenza di risposta da parte del basicrobot
 	State noResponse{
 		println("BasicRobot did not answer!") color yellow
 	}
 	Goto end
	
	//Stato che rappresenta il robot in attesa di lavoro
	State waitingWorking{
		println("$name is in HOME position waiting for working") color yellow
	}
	Transition t0 whenMsg arrived_RP -> takeRP
	
	//Stato che rappresenta il robot che va a recuperare un RP dal WasteStorage
	State takeRP{
		//TODO: move the robot to WasteIn port, take an RP and bring it to BURNIN port
		[#
			planner.setGoal(WASTEINx,WASTEINy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
	}
	Transition t0 whenReply doplandone -> bringRPtoBURNIN
				  whenReply doplanfailed -> exit
	//Stato che rappresenta il robot che porta l'RP recuperato dal WasteStorage nella porta BURNIN
	State bringRPtoBURNIN{
		delay 2000 //simulazione del prelievo di un RP dal WasteStorage
		[#
			planner.setGoal(BURNINx,BURNINy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
	}
	Transition t0 whenReply doplandone -> returnHOME
				  whenReply doplanfailed -> exit
	//Stato che rappresenta lo spostamento in HOME del robottino una volta che l'RP è stato messo nell'inceneritore
	State returnHOME{
		forward wis -m rpInBurnin : rpInBurnin(1)
		println("An RP is in BURNIN port") color yellow
		[#
			planner.setGoal(HOMEx,HOMEy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
		//then, return HOME
	}
	Transition t0 whenEvent endBurning -> takeAshFromBURNOUT
	
	//Stato che rappresenta il robot che preleva la cenere dalla porta BURNOUT
	State takeAshFromBURNOUT{
		//TODO: move the robot to BURNOUT port and bring ash to ASHOUT port
		[#
			planner.setGoal(BURNOUTx,BURNOUTy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
	}
	Transition t0 whenReply doplandone -> bringAshtoASHOUT
				  whenReply doplanfailed -> exit
	//Stato che rappresenta il robot che va a depositare la cenere raccolta dall'inceneritore
	State bringAshtoASHOUT{
		delay 2000 //simulo il prelievo della cenere da BURNOUT
		[#
			planner.setGoal(ASHOUTx,ASHOUTy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
	}
	Transition t0 whenReply doplandone -> restartJob
				  whenReply doplanfailed -> exit
	//Stato che rappresenta il robot che torna in HOME dopo aver scaricato le ceneri nell'AshStorage
	State restartJob{
		delay 2000 //simulo lo scaricamento della cenere
		println("The ash has been taken out") color yellow
		//mando notifica di nuova cenere al mok del MonitoringDevice
		forward monitoring_device_mok -m newAshes : newAshes(1)
		[#
			planner.setGoal(HOMEx,HOMEy)
			CurPlan = planner.doPlanCompact()
			planner.doPathOnMap(CurPlan)
		#]
		request basicrobot -m doplan:doplan($CurPlan, 330)
	}
	Transition t0 whenReply doplandone -> waitingWorking
				  whenReply doplanfailed -> exit
	
	//Stato di fine, nel caso l'engage del BasicRobot non fosse andata a buon fine
	State end{
		println("$name | ENDS ") color yellow
	}
	State exit{
		println("$name has been terminated") color yellow
	}
}
//-----------------------------------------------------------------------------------------------------------

//---------------------------------Attore Incinerator--------------------------------------------------------
QActor incinerator context ctx_waste_incinerator_service{
	[# val BTIME = 10000L; var stato = 0; #]
	
	State s0 initial{
		println("$name STARTS") color red
	}
	Transition t0 whenMsg activationCommand -> turnOn
	
	State turnOn {
		println("Incinerator is on. Waiting for RPs to burn...") color red
	}
	Transition t0 whenMsg startBurning -> handleStartBurning
	
	//Stato per gestire l'inizio di burning
	State handleStartBurning{
		println("Incinerator is burning...") color red
		[# stato = 1 #]
		updateResource [# "statoIncinerator(1)" #] //aggiorno gli Observer collegati
	}
	Transition t0 whenTimeVar BTIME -> handleEndBurning
	
	//Stato per gestire la fine di burning
	State handleEndBurning{
		emit endBurning : endBurning(1) //emette il segnale di fine burning
		[# stato = 0 #]
	}
	Transition t0 whenMsg startBurning -> handleStartBurning
}
//-----------------------------------------------------------------------------------------------------------

//-----------------------Attore mock che simula il comportamento della Scale---------------------------------
QActor scalemock context ctx_waste_incinerator_service{
	State s0 initial {
		println("$name STARTS") color black
	}
	Transition t0 whenTime 1000 -> simulateRP //l'attore simula l'arrivo di un RP dopo 1 secondo
	
	State simulateRP {
		delay 5000
		forward wis -m arrived_RP : arrived_RP(1)
	}
	Goto simulateRP
}
//-----------------------------------------------------------------------------------------------------------

//------------------------Attore mok che simula il comportamento del MonitoringDevice------------------------
QActor monitoring_device_mok context ctx_waste_incinerator_service{
	[# var ashLevel = 0; val MAX_LEVEL = 4 #] //livello delle cenere sotto forma di numero di RP bruciati
	
	State s0 initial{
		println("$name STARTS") color yellow
	}
	Transition t0 whenMsg newAshes -> handleAshes
	
	//Stato per gestire l'arrivo di nuova cenere nel container
	State handleAshes{
		[# ashLevel ++ #]
		//Se il livello della cenere = MAX_LEVEL, allora non posso bruciare altri RP
		if [# ashLevel == MAX_LEVEL #]
		{
			println("AshStorage is full. It is not possible to burn new RPs.") color yellow
			updateResource [# "statoAshStorage(1)" #] //aggiorno gli Observer collegati
		}
		else
		{
			updateResource [# "statoAshStorage(0)" #] //aggiorno gli Observer collegati
		}
	}
	Transition t0 whenTime 40000   -> simulateRemoveAshes
				  whenMsg newAshes -> handleAshes
				  
	//Stato per simulare la svuotamento del container di cenere
	State simulateRemoveAshes{
		println("Removed ashes from AshStorage. Now the container is empty.") color yellow
		[# ashLevel = 0 #]
		updateResource [# "statoAshStorage(0)" #] //aggiorno gli Observer collegati
	}
	Transition t0 whenMsg newAshes -> handleAshes
}
//-----------------------------------------------------------------------------------------------------------
