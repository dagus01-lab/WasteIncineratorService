/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val MAX_CAPACITA = 50; var capienzaAttuale = 0 //rappresentazione della coldRoom
			
			//Per il momento mappo un ticket come una variabile "temporale", ma in realtà dovrei gestire più tempi diversi (uno per ogni ticket)
				var StartTime = 0L
				val MAX_DURATA_TICKET = 10000L
				var TempoTrascorso = 0L //tempo trascorso da quando è stato emesso il ticket
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleStore",cond=whenRequest("store"))
					transition(edgeName="t01",targetState="handleScarica",cond=whenRequest("scarica"))
				}	 
				state("handleStore") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("store(N)"), Term.createTerm("store(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var FW = payloadArg(0).toInt()  
								if(  capienzaAttuale + FW <= MAX_CAPACITA  
								 ){answer("store", "storeAccepted", "storeAccepted(1)"   )  
								StartTime = getCurrentTime()
								}
								else
								 {answer("store", "storeRefused", "storeRefused(1)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleStore",cond=whenRequest("store"))
					transition(edgeName="t03",targetState="handleScarica",cond=whenRequest("scarica"))
				}	 
				state("handleScarica") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("scarica(N)"), Term.createTerm("scarica(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var FW = payloadArg(0).toInt()  
								TempoTrascorso = getDuration(StartTime)
								if(  (capienzaAttuale + FW <= MAX_CAPACITA) && TempoTrascorso <= MAX_DURATA_TICKET  
								 ){  capienzaAttuale += FW; 
													var capienzaRimanente = MAX_CAPACITA - capienzaAttuale 
								answer("scarica", "scaricaAccepted", "scaricaAccepted(1)"   )  
								CommUtils.outblue("Capienza rimanente : $capienzaRimanente")
								}
								else
								 {answer("scarica", "scaricaRefused", "scaricaRefused(1)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleStore",cond=whenRequest("store"))
					transition(edgeName="t05",targetState="handleScarica",cond=whenRequest("scarica"))
				}	 
			}
		}
} 
