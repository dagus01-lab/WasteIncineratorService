/* Generated by AN DISI Unibo */ 
package it.unibo.drivermock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Drivermock ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="effettuaRichiesta", cond=doswitch() )
				}	 
				state("effettuaRichiesta") { //this:State
					action { //it:State
						CommUtils.outred("Effettuo una richiesta di scarico.")
						request("store", "store(5)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleStoreAccepted",cond=whenReply("storeAccepted"))
					transition(edgeName="t07",targetState="handleStoreRefused",cond=whenReply("storeRefused"))
				}	 
				state("handleStoreAccepted") { //this:State
					action { //it:State
						CommUtils.outred("Richiesta di scarico accettata. Mi metto in marcia per la consegna.")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="effettuaScarico", cond=doswitch() )
				}	 
				state("handleStoreRefused") { //this:State
					action { //it:State
						CommUtils.outred("Richiesta di scarico rifiutata. Aspetto un po' e riprovo.")
						delay(10000) 
						request("store", "store(5)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="effettuaRichiesta", cond=doswitch() )
				}	 
				state("effettuaScarico") { //this:State
					action { //it:State
						request("scarica", "scarica(5)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleScaricaAccepted",cond=whenReply("scaricaAccepted"))
					transition(edgeName="t09",targetState="handleScaricaRefused",cond=whenReply("scaricaRefused"))
				}	 
				state("handleScaricaAccepted") { //this:State
					action { //it:State
						CommUtils.outred("Scarico accettato. Deposito la merce.")
						delay(25000) 
						System.exit(0) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleScaricaRefused") { //this:State
					action { //it:State
						CommUtils.outred("Scarico rifiutato. Rieffettuo la richiesta.")
						delay(4000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="effettuaRichiesta", cond=doswitch() )
				}	 
			}
		}
} 
